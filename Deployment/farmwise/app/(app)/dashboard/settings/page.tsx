'use client';

import { useState } from 'react';
import { 
  Title, 
  Paper, 
  Group, 
  Text, 
  Button, 
  Stack, 
  Divider, 
  Switch, 
  SegmentedControl, 
  Modal,
  useMantineColorScheme,
  ActionIcon,
  Tooltip,
  PasswordInput,
  Alert,
  SimpleGrid,
  Card,
  Badge,
  Tabs,
  Progress,
  List,
  ThemeIcon,
  Select,
  PinInput,
  CopyButton,
  Center,
  Image,
  Timeline,
  TextInput,
  Textarea
} from '@mantine/core';
import { useDisclosure } from '@mantine/hooks';
import { 
  IconSun, 
  IconMoon, 
  IconBell, 
  IconRuler, 
  IconDatabaseExport, 
  IconTrash, 
  IconAlertTriangle, 
  IconLock, 
  IconShieldLock,
  IconPassword,
  IconFaceId,
  IconCloudStorm,
  IconCalendarEvent,
  IconPlant,
  IconTool,
  IconInfoCircle,
  IconDeviceMobile,
  IconMail,
  IconSatellite,
  IconClipboardCheck,
  IconBug,
  IconTractor,
  IconTemperature,
  IconDroplet,
  IconAlertOctagon,
  IconHistory,
  IconDeviceLaptop,
  IconDeviceTablet,
  IconShield,
  IconShieldCheck,
  IconLocation,
  IconWorldWww,
  IconCheck,
  IconX
} from '@tabler/icons-react';

export default function SettingsPage() {
  // Modal visibility states
  const [deleteModalOpened, { open: openDeleteModal, close: closeDeleteModal }] = useDisclosure(false);
  const [passwordModalOpened, { open: openPasswordModal, close: closePasswordModal }] = useDisclosure(false);
  const [loginHistoryOpened, { open: openLoginHistory, close: closeLoginHistory }] = useDisclosure(false);
  const [twoFactorModalOpened, { open: openTwoFactorModal, close: closeTwoFactorModal }] = useDisclosure(false);
  const [passkeysModalOpened, { open: openPasskeysModal, close: closePasskeysModal }] = useDisclosure(false);
  const [deactivateModalOpened, { open: openDeactivateModal, close: closeDeactivateModal }] = useDisclosure(false);
  const [exportModalOpened, { open: openExportModal, close: closeExportModal }] = useDisclosure(false);

  // Mock settings state - expanded with more options
  const [settings, setSettings] = useState({
    // Notifications - General
    emailNotifications: true,
    inAppNotifications: true,
    // Notifications - Farm Operations
    notifyCropHealth: true,
    notifyPestDisease: true,
    notifySatelliteImagery: false,
    // Notifications - Weather
    notifyWeatherAlerts: true,
    notifyTemperatureExtremes: false,
    notifyRainfallForecasts: true,
    // Notifications - Equipment & Tasks
    notifyTaskReminders: true,
    notifyEquipmentMaintenance: true,
    notifyPlantingHarvesting: false,
    // Security
    twoFactorAuthEnabled: false,
    facialRecognitionEnabled: false,
    // Preferences
    units: 'metric', // 'metric' or 'imperial'
    language: 'english',
    defaultView: 'overview',
    dateFormat: 'mm/dd/yyyy',
    // Data Management
    autoBackup: false,
    backupFrequency: 'weekly',
    dataRetention: 'indefinite'
  });

  // Password change form state
  const [passwordForm, setPasswordForm] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: '',
  });
  const [passwordError, setPasswordError] = useState<string | null>(null);
  const [passwordSuccess, setPasswordSuccess] = useState(false);

  // Mock login history data
  const mockLoginHistory = [
    { 
      id: 1, 
      date: 'Today, 10:45 AM', 
      device: 'Windows PC', 
      browser: 'Chrome', 
      location: 'Dallas, TX, USA', 
      ip: '192.168.1.XX', 
      success: true,
      icon: IconDeviceLaptop
    },
    { 
      id: 2, 
      date: 'Yesterday, 8:30 PM', 
      device: 'iPhone 13', 
      browser: 'Safari', 
      location: 'Dallas, TX, USA', 
      ip: '192.168.1.XX', 
      success: true,
      icon: IconDeviceMobile 
    },
    { 
      id: 3, 
      date: 'Sep 15, 2:15 PM', 
      device: 'iPad Pro', 
      browser: 'Safari', 
      location: 'Austin, TX, USA', 
      ip: '42.188.XX.XX', 
      success: true,
      icon: IconDeviceTablet
    },
    { 
      id: 4, 
      date: 'Sep 10, 7:22 AM', 
      device: 'Unknown Device', 
      browser: 'Firefox', 
      location: 'Seattle, WA, USA', 
      ip: '87.123.XX.XX', 
      success: false,
      icon: IconDeviceLaptop
    }
  ];

  // State for 2FA setup
  const [twoFactorStep, setTwoFactorStep] = useState<'verify' | 'scan' | 'confirm' | 'success'>('verify');
  const [twoFactorCode, setTwoFactorCode] = useState('');
  const [twoFactorSecret, setTwoFactorSecret] = useState('ABCDEF123456GHIJKLMN789012'); // This would be generated by API
  const [twoFactorError, setTwoFactorError] = useState<string | null>(null);
  
  // State for passkey setup
  const [passkeyStep, setPasskeyStep] = useState<'info' | 'create' | 'confirm' | 'success'>('info');
  const [passkeyName, setPasskeyName] = useState('');
  const [passkeyError, setPasskeyError] = useState<string | null>(null);
  const [userPasskeys, setUserPasskeys] = useState<{id: string, name: string, createdAt: string, lastUsed: string | null}[]>([
    {id: 'pk-123', name: 'My Laptop', createdAt: '2023-09-15', lastUsed: '2023-10-20'},
  ]);

  // Deactivate account handler
  const [deactivateReason, setDeactivateReason] = useState('');
  const [deactivateConfirmation, setDeactivateConfirmation] = useState('');
  const [deactivateError, setDeactivateError] = useState<string | null>(null);
  const [exportFormat, setExportFormat] = useState<'csv' | 'json'>('csv');
  const [exportOptions, setExportOptions] = useState({
    includeProfile: true,
    includeFarmData: true,
    includeEquipment: true,
    includeTaskHistory: true,
    includeWeatherHistory: false
  });

  // Update type definition for handleSettingChange key
  type SettingsKey = keyof typeof settings;

  const handleSettingChange = (key: SettingsKey, value: any) => {
    console.log(`Setting ${key} changed to:`, value);
    // Add API call logic here to update settings
    setSettings((prev) => ({ ...prev, [key]: value }));
    // Add notification for success/failure
  };

  const handleExportData = (format: 'csv' | 'json') => {
    setExportFormat(format);
    openExportModal();
  };

  const handleDeleteAccount = () => {
    console.log('Deleting account...');
    // Add logic to trigger account deletion API
    closeDeleteModal();
    // Redirect user after deletion (e.g., to signup or login)
    // Provide feedback (e.g., final confirmation message)
  };

  // Password change handler
  const handlePasswordChange = () => {
    // Reset states
    setPasswordError(null);
    setPasswordSuccess(false);
    
    // Validate passwords
    if (!passwordForm.currentPassword) {
      setPasswordError("Current password is required");
      return;
    }
    
    if (passwordForm.newPassword.length < 8) {
      setPasswordError("New password must be at least 8 characters");
      return;
    }
    
    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      setPasswordError("New passwords don't match");
      return;
    }
    
    // TODO: API call to change password
    console.log('Changing password...');
    
    // Simulate API call success
    setTimeout(() => {
      setPasswordSuccess(true);
      // Reset form
      setPasswordForm({
        currentPassword: '',
        newPassword: '',
        confirmPassword: '',
      });
      
      // Close modal after 2 seconds
      setTimeout(() => {
        closePasswordModal();
        setPasswordSuccess(false);
      }, 2000);
    }, 1000);
  };

  // Reset password form when modal closes
  const handlePasswordModalClose = () => {
    setPasswordForm({
      currentPassword: '',
      newPassword: '',
      confirmPassword: '',
    });
    setPasswordError(null);
    setPasswordSuccess(false);
    closePasswordModal();
  };

  // 2FA setup handlers
  const handleStartTwoFactorSetup = () => {
    // Reset states
    setTwoFactorStep('verify');
    setTwoFactorCode('');
    setTwoFactorError(null);
    
    // In a real app, we would make an API call to get a new 2FA secret
    // Mock this behavior with a timeout
    setTimeout(() => {
      setTwoFactorStep('scan');
      // The secret would come from the API
    }, 1000);
    
    openTwoFactorModal();
  };
  
  const handleVerifyTwoFactorCode = () => {
    if (twoFactorCode.length !== 6) {
      setTwoFactorError('Please enter a 6-digit code');
      return;
    }
    
    // Mock verification - in real app would call API to verify
    if (twoFactorCode === '123456') { // Demo code for testing
      setTwoFactorStep('success');
      setSettings(prev => ({ ...prev, twoFactorAuthEnabled: true }));
      
      // Close after showing success
      setTimeout(() => {
        closeTwoFactorModal();
        setTwoFactorStep('verify');
        setTwoFactorCode('');
      }, 3000);
    } else {
      setTwoFactorError('Invalid verification code. Please try again.');
    }
  };
  
  const handleDisableTwoFactor = () => {
    // In real app, would show confirmation dialog and make API call
    setSettings(prev => ({ ...prev, twoFactorAuthEnabled: false }));
    // Add success notification
  };
  
  // Passkey handlers
  const handleManagePasskeys = () => {
    setPasskeyStep('info');
    setPasskeyName('');
    setPasskeyError(null);
    openPasskeysModal();
  };
  
  const handleCreatePasskey = () => {
    if (!passkeyName.trim()) {
      setPasskeyError('Please enter a name for this passkey');
      return;
    }
    
    setPasskeyStep('create');
    
    // Mock WebAuthn registration with a timeout
    // In real app, would use the WebAuthn API
    setTimeout(() => {
      // Mock successful registration
      const newPasskey = {
        id: `pk-${Math.random().toString(36).substring(2, 9)}`,
        name: passkeyName,
        createdAt: new Date().toISOString().split('T')[0],
        lastUsed: null
      };
      
      setUserPasskeys(prev => [...prev, newPasskey]);
      setPasskeyStep('success');
      
      // Reset after success
      setTimeout(() => {
        setPasskeyStep('info');
      }, 3000);
    }, 2000);
  };
  
  const handleDeletePasskey = (id: string) => {
    // In real app, would show confirmation dialog and make API call
    setUserPasskeys(prev => prev.filter(passkey => passkey.id !== id));
    // Add success notification
  };

  const handleTwoFactorModalClose = () => {
    setTwoFactorStep('verify');
    setTwoFactorCode('');
    setTwoFactorError(null);
    closeTwoFactorModal();
  };
  
  const handlePasskeysModalClose = () => {
    setPasskeyStep('info');
    setPasskeyName('');
    setPasskeyError(null);
    closePasskeysModal();
  };

  // Deactivate account handler
  const handleDeactivateAccount = () => {
    setDeactivateError(null);
    
    if (deactivateConfirmation.toLowerCase() !== 'deactivate') {
      setDeactivateError("Please type 'deactivate' to confirm");
      return;
    }
    
    // In a real app, this would call an API to deactivate the account
    console.log('Deactivating account:', { reason: deactivateReason });
    
    // Show success and close after delay
    setTimeout(() => {
      closeDeactivateModal();
      // Here you might redirect to a "goodbye" page or login
    }, 2000);
  };
  
  const handleStartExport = () => {
    // In a real app, this would call an API to generate the export
    console.log('Exporting data in format:', exportFormat, 'with options:', exportOptions);
    
    // Mock download after a delay
    setTimeout(() => {
      // In a real app, this would trigger a file download
      const mockFileName = `farmwise-export-${new Date().toISOString().split('T')[0]}.${exportFormat}`;
      alert(`Your export "${mockFileName}" would start downloading now.`);
      closeExportModal();
    }, 1500);
  };

  const handleDeactivateModalClose = () => {
    setDeactivateReason('');
    setDeactivateConfirmation('');
    setDeactivateError(null);
    closeDeactivateModal();
  };
  
  const handleExportModalClose = () => {
    closeExportModal();
  };

  return (
    <Stack gap="lg">
      <Title order={2}>Application Settings</Title>

      {/* Notification Settings - Enhanced with better layout */}
      <Paper withBorder shadow="sm" p="lg" radius="md">
        <Group justify="space-between" mb="md">
          <Title order={4}>Notifications</Title>
          <Badge 
            size="lg" 
            variant="outline" 
            color={settings.emailNotifications || settings.inAppNotifications ? "green" : "gray"}
          >
            {settings.emailNotifications || settings.inAppNotifications ? "Active" : "Inactive"}
          </Badge>
        </Group>
        
        <Tabs defaultValue="channels">
          <Tabs.List mb="md">
            <Tabs.Tab value="channels" leftSection={<IconBell size={16} />}>
              Notification Channels
            </Tabs.Tab>
            <Tabs.Tab value="farm" leftSection={<IconPlant size={16} />}>
              Farm Operations
            </Tabs.Tab>
            <Tabs.Tab value="weather" leftSection={<IconCloudStorm size={16} />}>
              Weather Alerts
            </Tabs.Tab>
            <Tabs.Tab value="equipment" leftSection={<IconTractor size={16} />}>
              Equipment & Tasks
            </Tabs.Tab>
          </Tabs.List>

          {/* Notification Channels Tab */}
          <Tabs.Panel value="channels">
            <SimpleGrid cols={{ base: 1, sm: 2 }} spacing="md">
              <Card withBorder p="md" radius="md">
                <Group mb="xs">
                  <IconMail size={20} />
                  <Text fw={500}>Email Notifications</Text>
                </Group>
                <Text size="sm" color="dimmed" mb="md">
                  Receive important alerts directly to your inbox.
                </Text>
                <Switch
                  checked={settings.emailNotifications}
                  onChange={(event) => handleSettingChange('emailNotifications', event.currentTarget.checked)}
                  label="Enable Email Notifications"
                  description="All important updates sent to your email"
                />
              </Card>

              <Card withBorder p="md" radius="md">
                <Group mb="xs">
                  <IconDeviceMobile size={20} />
                  <Text fw={500}>In-App Notifications</Text>
                </Group>
                <Text size="sm" color="dimmed" mb="md">
                  See notifications directly in the FarmWise application.
                </Text>
                <Switch
                  checked={settings.inAppNotifications}
                  onChange={(event) => handleSettingChange('inAppNotifications', event.currentTarget.checked)}
                  label="Enable In-App Notifications"
                  description="Receive updates while using the app"
                />
              </Card>
            </SimpleGrid>
          </Tabs.Panel>

          {/* Farm Operations Tab */}
          <Tabs.Panel value="farm">
            <SimpleGrid cols={{ base: 1, sm: 2 }} spacing="md">
              <Card withBorder p="md" radius="md">
                <Group mb="xs">
                  <IconPlant color="green" size={20} />
                  <Text fw={500}>Crop Health Alerts</Text>
                </Group>
                <Text size="sm" color="dimmed" mb="md">
                  Get alerts when our AI detects potential issues with your crops.
                </Text>
                <Switch
                  checked={settings.notifyCropHealth}
                  onChange={(event) => handleSettingChange('notifyCropHealth', event.currentTarget.checked)}
                  label="Crop Health Notifications"
                  thumbIcon={<IconPlant size={12} />}
                  disabled={!settings.emailNotifications && !settings.inAppNotifications}
                />
              </Card>

              <Card withBorder p="md" radius="md">
                <Group mb="xs">
                  <IconBug color="orange" size={20} />
                  <Text fw={500}>Pest & Disease Alerts</Text>
                </Group>
                <Text size="sm" color="dimmed" mb="md">
                  Be notified when pest or disease threats are detected or forecasted.
                </Text>
                <Switch
                  checked={settings.notifyPestDisease}
                  onChange={(event) => handleSettingChange('notifyPestDisease', event.currentTarget.checked)}
                  label="Pest & Disease Notifications"
                  thumbIcon={<IconBug size={12} />}
                  disabled={!settings.emailNotifications && !settings.inAppNotifications}
                />
              </Card>

              <Card withBorder p="md" radius="md">
                <Group mb="xs">
                  <IconSatellite color="blue" size={20} />
                  <Text fw={500}>Satellite Imagery Updates</Text>
                </Group>
                <Text size="sm" color="dimmed" mb="md">
                  Get notified when new satellite imagery of your farm is available.
                </Text>
                <Switch
                  checked={settings.notifySatelliteImagery}
                  onChange={(event) => handleSettingChange('notifySatelliteImagery', event.currentTarget.checked)}
                  label="New Imagery Notifications"
                  thumbIcon={<IconSatellite size={12} />}
                  disabled={!settings.emailNotifications && !settings.inAppNotifications}
                />
              </Card>
            </SimpleGrid>
          </Tabs.Panel>

          {/* Weather Tab */}
          <Tabs.Panel value="weather">
            <SimpleGrid cols={{ base: 1, sm: 2 }} spacing="md">
              <Card withBorder p="md" radius="md">
                <Group mb="xs">
                  <IconAlertOctagon color="red" size={20} />
                  <Text fw={500}>Severe Weather Alerts</Text>
                </Group>
                <Text size="sm" color="dimmed" mb="md">
                  Emergency notifications for severe weather events.
                </Text>
                <Switch
                  checked={settings.notifyWeatherAlerts}
                  onChange={(event) => handleSettingChange('notifyWeatherAlerts', event.currentTarget.checked)}
                  label="Severe Weather Alerts"
                  thumbIcon={<IconCloudStorm size={12} />}
                  disabled={!settings.emailNotifications && !settings.inAppNotifications}
                />
              </Card>

              <Card withBorder p="md" radius="md">
                <Group mb="xs">
                  <IconTemperature color="orange" size={20} />
                  <Text fw={500}>Temperature Extremes</Text>
                </Group>
                <Text size="sm" color="dimmed" mb="md">
                  Be notified of unusual hot or cold conditions that may affect crops.
                </Text>
                <Switch
                  checked={settings.notifyTemperatureExtremes}
                  onChange={(event) => handleSettingChange('notifyTemperatureExtremes', event.currentTarget.checked)}
                  label="Temperature Notifications"
                  thumbIcon={<IconTemperature size={12} />}
                  disabled={!settings.emailNotifications && !settings.inAppNotifications}
                />
              </Card>

              <Card withBorder p="md" radius="md">
                <Group mb="xs">
                  <IconDroplet color="blue" size={20} />
                  <Text fw={500}>Rainfall & Irrigation</Text>
                </Group>
                <Text size="sm" color="dimmed" mb="md">
                  Updates on precipitation forecasts and irrigation needs.
                </Text>
                <Switch
                  checked={settings.notifyRainfallForecasts}
                  onChange={(event) => handleSettingChange('notifyRainfallForecasts', event.currentTarget.checked)}
                  label="Rainfall & Irrigation Alerts"
                  thumbIcon={<IconDroplet size={12} />}
                  disabled={!settings.emailNotifications && !settings.inAppNotifications}
                />
              </Card>
            </SimpleGrid>
          </Tabs.Panel>

          {/* Equipment & Tasks Tab */}
          <Tabs.Panel value="equipment">
            <SimpleGrid cols={{ base: 1, sm: 2 }} spacing="md">
              <Card withBorder p="md" radius="md">
                <Group mb="xs">
                  <IconTool color="gray" size={20} />
                  <Text fw={500}>Equipment Maintenance</Text>
                </Group>
                <Text size="sm" color="dimmed" mb="md">
                  Timely reminders for scheduled maintenance of farm equipment.
                </Text>
                <Switch
                  checked={settings.notifyEquipmentMaintenance}
                  onChange={(event) => handleSettingChange('notifyEquipmentMaintenance', event.currentTarget.checked)}
                  label="Maintenance Reminders"
                  thumbIcon={<IconTool size={12} />}
                  disabled={!settings.emailNotifications && !settings.inAppNotifications}
                />
              </Card>

              <Card withBorder p="md" radius="md">
                <Group mb="xs">
                  <IconCalendarEvent color="indigo" size={20} />
                  <Text fw={500}>Task Deadlines</Text>
                </Group>
                <Text size="sm" color="dimmed" mb="md">
                  Reminders for upcoming or overdue farm tasks.
                </Text>
                <Switch
                  checked={settings.notifyTaskReminders}
                  onChange={(event) => handleSettingChange('notifyTaskReminders', event.currentTarget.checked)}
                  label="Task Deadline Reminders"
                  thumbIcon={<IconCalendarEvent size={12} />}
                  disabled={!settings.emailNotifications && !settings.inAppNotifications}
                />
              </Card>

              <Card withBorder p="md" radius="md">
                <Group mb="xs">
                  <IconClipboardCheck color="green" size={20} />
                  <Text fw={500}>Planting & Harvest Windows</Text>
                </Group>
                <Text size="sm" color="dimmed" mb="md">
                  Notifications for optimal planting and harvesting times.
                </Text>
                <Switch
                  checked={settings.notifyPlantingHarvesting}
                  onChange={(event) => handleSettingChange('notifyPlantingHarvesting', event.currentTarget.checked)}
                  label="Planting & Harvest Alerts"
                  thumbIcon={<IconClipboardCheck size={12} />}
                  disabled={!settings.emailNotifications && !settings.inAppNotifications}
                />
              </Card>
            </SimpleGrid>
          </Tabs.Panel>
        </Tabs>
      </Paper>

      {/* Security Options Section - Enhanced */}
      <Paper withBorder shadow="sm" p="lg" radius="md">
        <Title order={4} mb="md">Security</Title>
        
        {/* Password Strength Indicator - Placeholder */}
        <Card withBorder p="md" radius="md" mb="lg" bg="rgba(0,0,0,0.03)">
          <Group justify="apart" mb="xs">
            <Text fw={500} size="sm">Password Strength</Text>
            <Badge color="green">Strong</Badge>
          </Group>
          <Progress value={85} color="green" size="md" mb="xs"/>
          <Text size="xs" c="dimmed">Last changed: 45 days ago</Text>
        </Card>
        
        <SimpleGrid cols={{ base: 1, sm: 2 }} spacing="md">
          {/* Password Card */}
          <Card withBorder p="md" radius="md">
            <Group mb="xs">
              <IconLock size={20} />
              <Text fw={500}>Account Password</Text>
            </Group>
            <Text size="sm" color="dimmed" mb="md">
              Update your password regularly for better security.
            </Text>
            <Button 
              variant="outline" 
              leftSection={<IconLock size={16}/>}
              onClick={openPasswordModal}
              fullWidth
            >
              Change Password
            </Button>
          </Card>
          
          {/* 2FA Card */}
          <Card withBorder p="md" radius="md">
            <Group mb="xs">
              <IconShieldLock size={20} />
              <Text fw={500}>Two-Factor Authentication</Text>
            </Group>
            <Text size="sm" color="dimmed" mb="md">
              Add an extra layer of security with 2FA.
            </Text>
            {settings.twoFactorAuthEnabled ? (
              <Stack gap="sm">
                <Badge color="green" size="lg" fullWidth variant="light">
                  2FA is enabled
                </Badge>
                <Group grow>
                  <Button
                    color="red"
                    variant="outline"
                    leftSection={<IconX size={16} />}
                    onClick={handleDisableTwoFactor}
                    fullWidth
                  >
                    Disable 2FA
                  </Button>
                </Group>
              </Stack>
            ) : (
              <Button 
                variant="filled" 
                color="green"
                leftSection={<IconShieldLock size={16}/>}
                onClick={handleStartTwoFactorSetup}
                fullWidth
              >
                Enable 2FA
              </Button>
            )}
          </Card>
          
          {/* Login History Card */}
          <Card withBorder p="md" radius="md">
            <Group mb="xs">
              <IconHistory size={20} />
              <Text fw={500}>Login Activity</Text>
            </Group>
            <Text size="sm" color="dimmed" mb="md">
              Review recent logins to your account.
            </Text>
            <Button 
              variant="outline" 
              leftSection={<IconHistory size={16}/>}
              onClick={openLoginHistory}
              fullWidth
            >
              View Login History
            </Button>
          </Card>
          
          {/* Passkeys Card */}
          <Card withBorder p="md" radius="md">
            <Group mb="xs">
              <IconPassword size={20} />
              <Text fw={500}>Passkeys</Text>
            </Group>
            <Text size="sm" color="dimmed" mb="md">
              Passwordless login with FIDO2 security keys.
            </Text>
            <Button 
              variant="outline" 
              leftSection={<IconPassword size={16}/>}
              onClick={handleManagePasskeys}
              fullWidth
            >
              {userPasskeys.length > 0 ? 'Manage Passkeys' : 'Setup Passkeys'}
            </Button>
          </Card>
        </SimpleGrid>
        
        {/* Facial Recognition - Experimental */}
        <Card withBorder p="md" radius="md" mt="md" bg="rgba(25,113,194,0.05)">
          <Group mb="xs">
            <IconFaceId color="#1971C2" size={20} />
            <Text fw={500}>Facial Recognition (Beta)</Text>
            <Badge color="blue">Experimental</Badge>
          </Group>
          <Text size="sm" color="dimmed" mb="md">
            Secure biometric login using facial recognition technology.
          </Text>
          <Group justify="apart">
            <Text size="sm">This feature is currently under development and requires compatible hardware.</Text>
            <Button 
              variant="outline" 
              color="blue"
              leftSection={<IconFaceId size={16}/>}
              onClick={() => handleSettingChange('facialRecognitionEnabled', !settings.facialRecognitionEnabled)}
              disabled
            >
              Coming Soon
            </Button>
          </Group>
        </Card>
        
      </Paper>

      {/* Preferences Settings - Enhanced */}
      <Paper withBorder shadow="sm" p="lg" radius="md">
        <Title order={4} mb="md">Preferences</Title>
        <SimpleGrid cols={{ base: 1, sm: 2 }} spacing="md">
          {/* Units Card */}
          <Card withBorder p="md" radius="md">
            <Group mb="xs">
              <IconRuler size={20} />
              <Text fw={500}>Measurement Units</Text>
            </Group>
            <Text size="sm" color="dimmed" mb="md">
              Choose your preferred unit system for measurements.
            </Text>
            <SegmentedControl
              fullWidth
              value={settings.units}
              onChange={(value) => handleSettingChange('units', value)}
              data={[
                { label: 'Metric (ha, °C)', value: 'metric' },
                { label: 'Imperial (ac, °F)', value: 'imperial' },
              ]}
            />
          </Card>
          
          {/* Default View Preference */}
          <Card withBorder p="md" radius="md">
            <Group mb="xs">
              <IconDeviceLaptop size={20} />
              <Text fw={500}>Default Dashboard View</Text>
            </Group>
            <Text size="sm" color="dimmed" mb="md">
              Choose which screen to show when you first log in.
            </Text>
            <Select
              data={[
                { value: 'overview', label: 'Farm Overview' },
                { value: 'weather', label: 'Weather Dashboard' },
                { value: 'crops', label: 'Crop Health Monitor' },
                { value: 'planning', label: 'Planning & Calendar' },
              ]}
              value={settings.defaultView || 'overview'}
              onChange={(value) => handleSettingChange('defaultView', value)}
            />
          </Card>
          
          {/* Date Format */}
          <Card withBorder p="md" radius="md">
            <Group mb="xs">
              <IconCalendarEvent size={20} />
              <Text fw={500}>Date & Time Format</Text>
            </Group>
            <Text size="sm" color="dimmed" mb="md">
              Set your preferred date and time format.
            </Text>
            <Select
              data={[
                { value: 'mm/dd/yyyy', label: 'MM/DD/YYYY (US)' },
                { value: 'dd/mm/yyyy', label: 'DD/MM/YYYY (UK/EU)' },
                { value: 'yyyy-mm-dd', label: 'YYYY-MM-DD (ISO)' },
              ]}
              value={settings.dateFormat || 'mm/dd/yyyy'}
              onChange={(value) => handleSettingChange('dateFormat', value)}
            />
          </Card>
        </SimpleGrid>
      </Paper>

      {/* Data Management Settings - Enhanced */}
      <Paper withBorder shadow="sm" p="lg" radius="md">
        <Title order={4} mb="md">Data Management</Title>
        <SimpleGrid cols={{ base: 1, sm: 2 }} spacing="md">
          {/* Data Export */}
          <Card withBorder p="md" radius="md">
            <Group mb="xs">
              <IconDatabaseExport size={20} />
              <Text fw={500}>Export Your Data</Text>
            </Group>
            <Text size="sm" color="dimmed" mb="md">
              Download all your farm data in standard formats.
            </Text>
            <SimpleGrid cols={2} spacing="xs">
              <Button 
                variant="outline" 
                leftSection={<IconDatabaseExport size={16}/>}
                onClick={() => handleExportData('csv')}
                fullWidth
              >
                CSV Format
              </Button>
              <Button 
                variant="outline" 
                leftSection={<IconDatabaseExport size={16}/>}
                onClick={() => handleExportData('json')}
                fullWidth
              >
                JSON Format
              </Button>
            </SimpleGrid>
          </Card>
          
          {/* Data Backup */}
          <Card withBorder p="md" radius="md">
            <Group mb="xs">
              <IconShieldCheck size={20} />
              <Text fw={500}>Data Backup</Text>
            </Group>
            <Text size="sm" color="dimmed" mb="md">
              Schedule automatic backups of your farm data.
            </Text>
            <Group grow>
              <Switch
                label="Enable Auto-Backup"
                checked={settings.autoBackup}
                onChange={(event) => handleSettingChange('autoBackup', event.currentTarget.checked)}
              />
            </Group>
            <Select
              label="Backup Frequency"
              data={[
                { value: 'daily', label: 'Daily' },
                { value: 'weekly', label: 'Weekly' },
                { value: 'monthly', label: 'Monthly' },
              ]}
              value={settings.backupFrequency || 'weekly'}
              onChange={(value) => handleSettingChange('backupFrequency', value)}
              disabled={!settings.autoBackup}
              mt="xs"
            />
          </Card>
          
          {/* Data Retention */}
          <Card withBorder p="md" radius="md" style={{ gridColumn: 'span 2' }}>
            <Group mb="xs">
              <IconInfoCircle size={20} />
              <Text fw={500}>Data Retention Policy</Text>
            </Group>
            <Text size="sm" color="dimmed" mb="md">
              Control how long we store your historical farm data.
            </Text>
            <Select
              data={[
                { value: '6months', label: '6 Months' },
                { value: '1year', label: '1 Year' },
                { value: '2years', label: '2 Years' },
                { value: 'indefinite', label: 'Indefinitely (Default)' },
              ]}
              value={settings.dataRetention || 'indefinite'}
              onChange={(value) => handleSettingChange('dataRetention', value)}
            />
            <Text size="xs" c="dimmed" mt="xs">
              Note: Shorter retention periods may affect historical analysis capabilities.
            </Text>
          </Card>
        </SimpleGrid>
      </Paper>

      {/* Account Actions Settings - Enhanced with better UI */}
      <Paper withBorder shadow="sm" p="lg" radius="md" mt="xl" style={{ borderColor: 'var(--mantine-color-red-4)' }}>
        <Group justify="apart" mb="md">
          <Title order={4} c="red">Account Actions</Title>
          <Badge color="red" variant="outline">Danger Zone</Badge>
        </Group>
        
        <SimpleGrid cols={{ base: 1, sm: 2 }} spacing="md">
          {/* Deactivate Account */}
          <Card withBorder p="md" radius="md" bg="rgba(245, 159, 0, 0.05)" style={{ borderColor: 'var(--mantine-color-orange-4)' }}>
            <Group mb="xs">
              <IconAlertTriangle color="orange" size={20} />
              <Text fw={500} c="orange">Deactivate Account</Text>
            </Group>
            <Text size="sm" color="dimmed" mb="md">
              Temporarily disable your account. You can reactivate later.
            </Text>
            <Button 
              color="orange" 
              variant="outline" 
              leftSection={<IconAlertTriangle size={16}/>}
              onClick={openDeactivateModal}
              fullWidth
            >
              Deactivate
            </Button>
          </Card>
          
          {/* Delete Account */}
          <Card withBorder p="md" radius="md" bg="rgba(250, 82, 82, 0.05)" style={{ borderColor: 'var(--mantine-color-red-4)' }}>
            <Group mb="xs">
              <IconTrash color="red" size={20} />
              <Text fw={500} c="red">Delete Account</Text>
            </Group>
            <Text size="sm" color="dimmed" mb="md">
              Permanently remove your account and all data. This cannot be undone.
            </Text>
            <Button 
              color="red" 
              variant="outline" 
              leftSection={<IconTrash size={16}/>}
              onClick={openDeleteModal}
              fullWidth
            >
              Delete Account
            </Button>
          </Card>
        </SimpleGrid>
      </Paper>

      {/* Change Password Modal */}
      <Modal
        opened={passwordModalOpened}
        onClose={handlePasswordModalClose}
        title={
          <Group gap="xs">
            <IconLock /> 
            <Text fw={500}>Change Your Password</Text>
          </Group>
        }
        centered
        size="md"
      >
        {passwordSuccess ? (
          <Alert color="green" title="Success!" mb="md">
            Your password has been successfully updated.
          </Alert>
        ) : (
          <>
            {passwordError && (
              <Alert color="red" title="Error" mb="md">
                {passwordError}
              </Alert>
            )}
            
            <Stack>
              <PasswordInput
                label="Current Password"
                placeholder="Enter your current password"
                value={passwordForm.currentPassword}
                onChange={(e) => setPasswordForm(prev => ({ ...prev, currentPassword: e.target.value }))}
                required
              />
              
              <PasswordInput
                label="New Password"
                placeholder="Enter your new password"
                description="Password must be at least 8 characters"
                value={passwordForm.newPassword}
                onChange={(e) => setPasswordForm(prev => ({ ...prev, newPassword: e.target.value }))}
                required
              />
              
              <PasswordInput
                label="Confirm New Password"
                placeholder="Confirm your new password"
                value={passwordForm.confirmPassword}
                onChange={(e) => setPasswordForm(prev => ({ ...prev, confirmPassword: e.target.value }))}
                required
              />
              
              <Group justify="flex-end" mt="md">
                <Button variant="default" onClick={handlePasswordModalClose}>
                  Cancel
                </Button>
                <Button onClick={handlePasswordChange}>
                  Update Password
                </Button>
              </Group>
            </Stack>
          </>
        )}
      </Modal>

      {/* Delete Account Confirmation Modal */}
      <Modal
        opened={deleteModalOpened}
        onClose={closeDeleteModal}
        title={
          <Group gap="xs">
            <IconAlertTriangle color='var(--mantine-color-red-6)'/> 
            <Text fw={500}>Confirm Account Deletion</Text>
          </Group>
        }
        centered
        size="md"
      >
        <Text size="sm">Are you absolutely sure you want to delete your account?</Text>
        <Text size="sm" fw={500} c="red" mt="xs">All your farm data, settings, and user information will be permanently lost.</Text>
        <Text size="sm" mt="sm">This action cannot be reversed.</Text>
        
        <Group justify="flex-end" mt="lg">
          <Button variant="default" onClick={closeDeleteModal}>
            Cancel
          </Button>
          <Button color="red" onClick={handleDeleteAccount} leftSection={<IconTrash size={16}/>}>
            Yes, Delete My Account
          </Button>
        </Group>
      </Modal>

      {/* Login History Modal */}
      <Modal
        opened={loginHistoryOpened}
        onClose={closeLoginHistory}
        title={
          <Group gap="xs">
            <IconHistory /> 
            <Text fw={500}>Recent Login Activity</Text>
          </Group>
        }
        centered
        size="lg"
      >
        <Alert color="blue" title="Security Tip" mb="md" icon={<IconShield />}>
          Review this list regularly. If you see any logins you don't recognize, change your password immediately.
        </Alert>
        
        <Stack gap="md">
          {mockLoginHistory.map((login) => (
            <Card key={login.id} withBorder p="sm" radius="md">
              <Group justify="apart" mb="xs">
                <Group>
                  <ThemeIcon 
                    size="lg" 
                    radius="xl" 
                    color={login.success ? "green" : "red"}
                    variant="light"
                  >
                    <login.icon size={20} />
                  </ThemeIcon>
                  <div>
                    <Text size="sm" fw={500}>{login.device}</Text>
                    <Text size="xs" c="dimmed">{login.date}</Text>
                  </div>
                </Group>
                <Badge color={login.success ? "green" : "red"}>
                  {login.success ? "Successful" : "Failed"}
                </Badge>
              </Group>
              
              <List size="xs" spacing="xs" center ml="xl">
                <List.Item icon={
                  <ThemeIcon color="gray" size={16} radius="xl" variant="light">
                    <IconWorldWww size={12} />
                  </ThemeIcon>
                }>
                  Browser: {login.browser}
                </List.Item>
                <List.Item icon={
                  <ThemeIcon color="gray" size={16} radius="xl" variant="light">
                    <IconLocation size={12} />
                  </ThemeIcon>
                }>
                  Location: {login.location}
                </List.Item>
                <List.Item icon={
                  <ThemeIcon color="gray" size={16} radius="xl" variant="light">
                    <IconShieldCheck size={12} />
                  </ThemeIcon>
                }>
                  IP Address: {login.ip}
                </List.Item>
              </List>
            </Card>
          ))}
        </Stack>
        
        <Button fullWidth mt="md" onClick={closeLoginHistory}>
          Close
        </Button>
      </Modal>

      {/* Two-Factor Authentication Setup Modal */}
      <Modal
        opened={twoFactorModalOpened}
        onClose={handleTwoFactorModalClose}
        title={
          <Group gap="xs">
            <IconShieldLock color="var(--mantine-color-green-6)" /> 
            <Text fw={500}>Two-Factor Authentication Setup</Text>
          </Group>
        }
        centered
        size="md"
      >
        {twoFactorStep === 'verify' && (
          <>
            <Text size="sm" mb="lg">
              To enhance your account security, we need to verify your identity first.
            </Text>
            
            <PasswordInput
              label="Enter your password"
              placeholder="Your current password"
              required
              mb="md"
            />
            
            <Group justify="flex-end">
              <Button variant="default" onClick={handleTwoFactorModalClose}>
                Cancel
              </Button>
              <Button color="blue" onClick={() => setTwoFactorStep('scan')}>
                Verify & Continue
              </Button>
            </Group>
          </>
        )}
        
        {twoFactorStep === 'scan' && (
          <>
            <Text size="sm" mb="md">
              Scan this QR code with your authenticator app (like Google Authenticator or Authy).
            </Text>
            
            <Center mb="md">
              {/* This would be a dynamically generated QR code in a real app */}
              <Image
                src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d0/QR_code_for_mobile_English_Wikipedia.svg/1200px-QR_code_for_mobile_English_Wikipedia.svg.png"
                alt="2FA QR Code"
                height={200}
                width={200}
                radius="md"
              />
            </Center>
            
            <Text fw={500} size="sm" mt="sm" mb="xs">
              Or enter this code manually:
            </Text>
            
            <Group justify="flex-start" align="center" mb="lg">
              <Text 
                size="sm" 
                style={{ 
                  fontFamily: 'monospace', 
                  letterSpacing: 1,
                  background: 'var(--mantine-color-gray-0)',
                  padding: '0.5rem',
                  borderRadius: 'var(--mantine-radius-md)' 
                }}
              >
                {twoFactorSecret}
              </Text>
              
              <CopyButton value={twoFactorSecret}>
                {({ copied, copy }) => (
                  <Button 
                    color={copied ? 'green' : 'blue'} 
                    variant="subtle" 
                    size="xs" 
                    onClick={copy}
                  >
                    {copied ? 'Copied!' : 'Copy'}
                  </Button>
                )}
              </CopyButton>
            </Group>
            
            <Divider my="md" />
            
            <Text fw={500} size="sm" mb="xs">
              Enter the 6-digit verification code from your app:
            </Text>
            
            <Center mb="md">
              <PinInput
                length={6}
                type="number"
                placeholder=""
                value={twoFactorCode}
                onChange={setTwoFactorCode}
                error={!!twoFactorError}
                size="lg"
              />
            </Center>
            
            {twoFactorError && (
              <Text color="red" size="sm" mb="md" ta="center">
                {twoFactorError}
              </Text>
            )}
            
            <Group justify="flex-end">
              <Button variant="default" onClick={handleTwoFactorModalClose}>
                Cancel
              </Button>
              <Button color="green" onClick={handleVerifyTwoFactorCode}>
                Verify & Enable 2FA
              </Button>
            </Group>
          </>
        )}
        
        {twoFactorStep === 'success' && (
          <>
            <Alert color="green" title="Success!" mb="md" icon={<IconCheck />}>
              Two-factor authentication has been successfully enabled for your account.
            </Alert>
            
            <Text size="sm" mb="lg">
              Now you'll need both your password and a verification code to sign in.
              Make sure to keep your authentication app safe!
            </Text>
            
            <Center>
              <Button color="green" onClick={handleTwoFactorModalClose}>
                Done
              </Button>
            </Center>
          </>
        )}
      </Modal>
      
      {/* Passkeys Management Modal */}
      <Modal
        opened={passkeysModalOpened}
        onClose={handlePasskeysModalClose}
        title={
          <Group gap="xs">
            <IconPassword /> 
            <Text fw={500}>Manage Passkeys</Text>
          </Group>
        }
        centered
        size="lg"
      >
        {passkeyStep === 'info' && (
          <>
            <Text size="sm" mb="md">
              Passkeys let you sign in without a password, using your device's biometric capabilities 
              (like fingerprint or face recognition) or screen lock.
            </Text>
            
            {userPasskeys.length > 0 ? (
              <>
                <Text fw={500} mt="md" mb="xs">
                  Your Passkeys
                </Text>
                
                <Stack gap="md" mb="xl">
                  {userPasskeys.map(passkey => (
                    <Card key={passkey.id} withBorder p="sm" radius="md">
                      <Group justify="apart">
                        <Group>
                          <ThemeIcon size="lg" radius="xl" color="blue" variant="light">
                            <IconPassword size={20} />
                          </ThemeIcon>
                          <div>
                            <Text fw={500} size="sm">{passkey.name}</Text>
                            <Text size="xs" c="dimmed">Created: {passkey.createdAt}</Text>
                            {passkey.lastUsed && (
                              <Text size="xs" c="dimmed">Last used: {passkey.lastUsed}</Text>
                            )}
                          </div>
                        </Group>
                        
                        <Button 
                          variant="subtle" 
                          color="red" 
                          onClick={() => handleDeletePasskey(passkey.id)}
                          size="xs"
                        >
                          Remove
                        </Button>
                      </Group>
                    </Card>
                  ))}
                </Stack>
              </>
            ) : (
              <Alert color="blue" title="No passkeys yet" mb="xl">
                You haven't set up any passkeys yet. Create your first one to enable passwordless login.
              </Alert>
            )}
            
            <Divider my="md" label="Add New Passkey" labelPosition="center" />
            
            <TextInput
              label="Passkey Name"
              description="Give this passkey a name you'll recognize (e.g., 'Work Laptop')"
              placeholder="Enter a name for this device/passkey"
              value={passkeyName}
              onChange={(e) => setPasskeyName(e.target.value)}
              error={passkeyError}
              mb="md"
            />
            
            <Group justify="flex-end">
              <Button variant="default" onClick={handlePasskeysModalClose}>
                Cancel
              </Button>
              <Button color="blue" onClick={handleCreatePasskey}>
                Create Passkey
              </Button>
            </Group>
          </>
        )}
        
        {passkeyStep === 'create' && (
          <>
            <Center py="xl">
              <Stack align="center" gap="md">
                <IconPassword size={64} stroke={1.5} />
                <Text fw={500} size="lg">Creating your passkey...</Text>
                <Text color="dimmed" ta="center">
                  Your browser is setting up the passkey. You may be prompted to use your fingerprint, 
                  face recognition, or PIN depending on your device.
                </Text>
              </Stack>
            </Center>
          </>
        )}
        
        {passkeyStep === 'success' && (
          <>
            <Alert color="green" title="Passkey Created Successfully!" mb="md" icon={<IconCheck />}>
              Your new passkey has been registered and is ready to use.
            </Alert>
            
            <Text size="sm" mb="lg" ta="center">
              You can now use this device to sign in without a password. 
              Your passkey is securely stored on this device.
            </Text>
            
            <Center>
              <Button color="green" onClick={() => setPasskeyStep('info')}>
                Done
              </Button>
            </Center>
          </>
        )}
      </Modal>

      {/* Deactivate Account Modal */}
      <Modal
        opened={deactivateModalOpened}
        onClose={handleDeactivateModalClose}
        title={
          <Group gap="xs">
            <IconAlertTriangle color="var(--mantine-color-orange-6)" /> 
            <Text fw={500}>Deactivate Your Account</Text>
          </Group>
        }
        centered
        size="md"
      >
        <Text size="sm" mb="md">
          Deactivating your account will temporarily hide your profile and data from FarmWise. 
          You can reactivate your account at any time by logging in again.
        </Text>
        
        <Alert color="orange" title="Important information" mb="lg" icon={<IconInfoCircle />}>
          <Text size="sm">
            • Your data will be preserved but inaccessible during deactivation<br />
            • Automatic tasks and alerts will be paused<br />
            • You will still receive critical farm-related security emails<br />
            • Your account will automatically reactivate if you log in again
          </Text>
        </Alert>
        
        <Textarea
          label="Why are you deactivating your account? (Optional)"
          placeholder="Your feedback helps us improve"
          value={deactivateReason}
          onChange={(e) => setDeactivateReason(e.target.value)}
          minRows={3}
          mb="md"
        />
        
        <TextInput
          label="Type 'deactivate' to confirm"
          placeholder="deactivate"
          value={deactivateConfirmation}
          onChange={(e) => setDeactivateConfirmation(e.target.value)}
          error={deactivateError}
          mb="lg"
          required
        />
        
        <Group justify="flex-end">
          <Button variant="default" onClick={handleDeactivateModalClose}>
            Cancel
          </Button>
          <Button color="orange" onClick={handleDeactivateAccount}>
            Deactivate Account
          </Button>
        </Group>
      </Modal>
      
      {/* Data Export Options Modal */}
      <Modal
        opened={exportModalOpened}
        onClose={handleExportModalClose}
        title={
          <Group gap="xs">
            <IconDatabaseExport /> 
            <Text fw={500}>Export Data - {exportFormat.toUpperCase()} Format</Text>
          </Group>
        }
        centered
        size="md"
      >
        <Text size="sm" mb="lg">
          Select which data to include in your {exportFormat.toUpperCase()} export file.
        </Text>
        
        <Stack gap="xs" mb="lg">
          <Switch
            label="Profile Information"
            description="Your personal and farm profile details"
            checked={exportOptions.includeProfile}
            onChange={(e) => setExportOptions(prev => ({ ...prev, includeProfile: e.currentTarget.checked }))}
          />
          
          <Switch
            label="Farm Data"
            description="Field boundaries, soil data, and crop information"
            checked={exportOptions.includeFarmData}
            onChange={(e) => setExportOptions(prev => ({ ...prev, includeFarmData: e.currentTarget.checked }))}
          />
          
          <Switch
            label="Equipment Records"
            description="Farm equipment inventory and maintenance logs"
            checked={exportOptions.includeEquipment}
            onChange={(e) => setExportOptions(prev => ({ ...prev, includeEquipment: e.currentTarget.checked }))}
          />
          
          <Switch
            label="Task History"
            description="Complete record of farm activities and tasks"
            checked={exportOptions.includeTaskHistory}
            onChange={(e) => setExportOptions(prev => ({ ...prev, includeTaskHistory: e.currentTarget.checked }))}
          />
          
          <Switch
            label="Weather History"
            description="Historical weather data for your farm location"
            checked={exportOptions.includeWeatherHistory}
            onChange={(e) => setExportOptions(prev => ({ ...prev, includeWeatherHistory: e.currentTarget.checked }))}
          />
        </Stack>
        
        <Alert color="blue" title="Privacy Note" mb="lg" icon={<IconInfoCircle />}>
          Your export will contain sensitive farm data. Keep this file secure and do not share it with unauthorized parties.
        </Alert>
        
        <Group justify="flex-end">
          <Button variant="default" onClick={handleExportModalClose}>
            Cancel
          </Button>
          <Button 
            color="blue" 
            leftSection={<IconDatabaseExport size={16} />}
            onClick={handleStartExport}
          >
            Export {exportFormat.toUpperCase()}
          </Button>
        </Group>
      </Modal>
    </Stack>
  );
} 